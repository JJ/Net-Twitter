=head1 NAME

Net::Twitter::Lite - A lean Moose based perl interface to the Twitter API

=head1 VERSION

This document describes version [% VERSION %]

=head1 SYNOPSIS

  use Net::Twitter::Lite;

  my $ntl = Net::Twitter::Lite->new(username => $user, password => $password);

  my $result = $ntl->update('Hello, world!');

  eval {
      my $feed = $ntl->friends_timeline({ since_id => $high_water, count => 100 });
      for my $status ( @$feed ) {
          say "$status->{user}{screen_name}: $status->{text};
      }
  };
  if ( @_ ) {
      die $@ unless UNIVERSAL::isa($@, 'Net::Twitter::Lite::Error');

      warn "$@\n";
  }


=head1 DESCRIPTION

B<Net::Twitter::Lite> attempts to provide a lean, robust, and easy to maintain
perl interface to the Twitter API. It provides some basic compatibility with
the L<Net::Twitter> module.  It takes a different approach in some areas,
however, so it is not a drop-in replacement.  See
L<Net::Twitter::Lite::Compat>, included with this distribution, for a
Net::Twitter compatible interface.

Net::Twitter::Lite uses L<Moose>.  Some may contend Moose and Lite are
mutually exclusive.  Moose greatly reduces the number of lines of code
necessary to accomplish the goals of Net::Twitter::Lite, so the author finds
the name appropriate.

Most Twitter API methods take parameters.  All Net::Twitter::Lite API
methods will accept a HASH ref of named parameters as specified in the Twitter
API documentation.  For convenience, many Net::Twitter::Lite methods accept
simple positional arguments as documented, below.  The positional parameter
passing style is optional; you can always use the named parameters in a hash
ref if you prefer.

Net::Twitter::Lite does not do aggressive parameter validation. It will
dutifully pass invalid parameters to Twitter if instructed, and if Twitter
returns an error as a result, Net::Twitter::Lite will throw a
L<Net::Twitter::Lite::Error> object.

The lack of aggressive parameter checking has an advantage.  If Twitter adds
new parameters to any of the API methods, you may begin using them immediately
without warnings or errors and without any need for modification to the source
code of this module.

Net::Twitter::Lite differs from Net::Twitter significantly in its error
handling strategy.  It throws L<Net::Twitter::Lite::Error> objects in response
to Twitter API and network errors.  You can catch and deal with these errors
using eval blocks in the usual way.  Throwing exceptions allows
Net::Twitter::Lite to work well with L<LWP::UserAgent::POE> in an environment
where there may be concurrent requests.

For compatibility with Net::Twitter, this distribution includes
L<Net::Twitter::Lite::Compat>.  It provides the same error handling strategy
as Net::Twitter returning C<undef> on error with C<get_error>, C<http_code>,
and C<http_message> methods to determine the nature of the error.

=head1 METHODS

=over 4

=item new

This creates a new instance of Net::Twitter::Lite.  It accepts several named
arguments, all of them optional:

=over 4

=item username

This is the username or email address used to authenticate with Twitter.

=item password

This is the password used to authenticate with Twitter.

=item useragent

This is the useragent string passed in each request to twitter.  It defaults
to C<Net::Twitter::Lite/[% VERSION %]>.

=item source

This is the application source identifier passed to twitter with the L</"update">
method.  It defaults to C<twitterpm>.

=item apiurl

This is the base URL for the Twitter API methods.  It defaults to
C<http://twitter.com>.  You may use a different URL to specify another
service, such as L<http://identi.ca> that provides a Twitter Compatible API.
Also, see L</"apihost"> and L</"apirealm">, below.

=item apihost

This is the C<netloc> argument passed to L<LWP::UserAgent> internally as part
of the HTTP Basic Authentication protocol.  It defaults to C<twitter.com:80>.

=item apirealm

This is the C<realm> argument passed to L<LWP::UserAgent> internally as port
of the HTTP Basic Authentication protocol.  It defaults to C<Twitter API>.

=item useragent_class

This is the name of the useragent class used internally.  It defaults to
C<LWP::UserAgent>.  You may pass C<LWP::UserAgent::POE> or another
LWP::UserAgent compatible class instead.

=back

=item credentials($username, $password)

This method can be used to set or change the L</"username"> and L</"password">
used to authenticated with Twitter.

=back

=head1 API METHODS

[% FOREACH section IN api_def;
   title = section.0;
   methods = section.1  -%]
=head2 [% title %]

=over 4

[% FOREACH method IN methods;
   name = method.0;
   def  = method.1;
   NEXT IF def.deprecated -%]
=item B<[% name %]>

[% IF def.required.size > 0;
       pos_params = def.required;
   ELSIF def.params.size == 1;
       pos_params = def.params;
   END;
   IF pos_params.size -%]
=item B<[% name %]([% pos_params.join(", ") %])>

[% END -%]

[% FOREACH alias IN def.aliases -%]
=item alias: [% alias %]

[% END -%]
=over 4

=item Parameters: [% IF def.params.size %][% def.params.join(", ") %][% ELSE %]I<none>[% END %]

=item Required: [% IF def.required.size %][% def.required.join(", ") %][% ELSE %]I<none>[% END %]

=back

[% def.description %]

Returns: [% def.returns %]

[% END -%]
=back

[% END -%]


=head1 SEE ALSO

=over 4

=item L<http://apiwiki.twitter.com/REST+API+Documentation>

This is the official Twitter API documentation. It describes the methods and their
parameters in more detail and may be more current than the documentation provided
with this module.

=item L<Net::Twitter>

This is the original perl interface to the Twitter API and inspiration for this
module.

=item L<LWP::UserAgent::POE>

This LWP::UserAgent compatible class can be used in L<POE> based application
along with Net::Twitter::Lite to provide concurrent, non-blocking requests.

=back

=head1 AUTHOR

Marc Mims <marc@questright.com>

=head1 LICENSE

Copyright (c) 2009 Marc Mims

The Twitter API itself, and the description text used in this module is:

Copyright (c) 2009 Twitter

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
