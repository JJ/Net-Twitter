NAME
    Net::Twitter::Lite - A lean Moose based perl interface to the Twitter
    API

VERSION
    This document describes version 0.00000_01

SYNOPSIS
      use Net::Twitter::Lite;

      my $ntl = Net::Twitter::Lite->new(username => $user, password => $password);

      my $result = $ntl->update('Hello, world!');

      eval {
          my $feed = $ntl->friends_timeline({ since_id => $high_water, count => 100 });
          for my $status ( @$feed ) {
              say "$status->{user}{screen_name}: $status->{text};
          }
      };
      if ( @_ ) {
          die $@ unless UNIVERSAL::isa($@, 'Net::Twitter::Lite::Error');

          warn "$@\n";
      }

DESCRIPTION
    Net::Twitter::Lite attempts to provide a lean, robust, and easy to
    maintain perl interface to the Twitter API. It provides some basic
    compatibility with the Net::Twitter module. It takes a different
    approach in some areas, however, so it is not a drop-in replacement. See
    Net::Twitter::Lite::Compat, included with this distribution, for a
    Net::Twitter compatible interface.

    Net::Twitter::Lite uses Moose. Some may contend Moose and Lite are
    mutually exclusive. Moose greatly reduces the number of lines of code
    necessary to accomplish the goals of Net::Twitter::Lite, so the author
    finds the name appropriate.

    Most Twitter API methods take parameters. All Net::Twitter::Lite API
    methods will accept a HASH ref of named parameters as specified in the
    Twitter API documentation. For convenience, many Net::Twitter::Lite
    methods accept simple positional arguments as documented, below. The
    positional parameter passing style is optional; you can always use the
    named parameters in a hash ref if you prefer.

    Net::Twitter::Lite does not do aggressive parameter validation. It will
    dutifully pass invalid parameters to Twitter if instructed, and if
    Twitter returns an error as a result, Net::Twitter::Lite will throw a
    Net::Twitter::Lite::Error object.

    The lack of aggressive parameter checking has an advantage. If Twitter
    adds new parameters to any of the API methods, you may begin using them
    immediately without warnings or errors and without any need for
    modification to the source code of this module.

    Net::Twitter::Lite differs from Net::Twitter significantly in its error
    handling strategy. It throws Net::Twitter::Lite::Error objects in
    response to Twitter API and network errors. You can catch and deal with
    these errors using eval blocks in the usual way. Throwing exceptions
    allows Net::Twitter::Lite to work well with LWP::UserAgent::POE in an
    environment where there may be concurrent requests.

    For compatibility with Net::Twitter, this distribution includes
    Net::Twitter::Lite::Compat. It provides the same error handling strategy
    as Net::Twitter returning "undef" on error with "get_error",
    "http_code", and "http_message" methods to determine the nature of the
    error.

METHODS
    new This creates a new instance of Net::Twitter::Lite. It accepts
        several named arguments, all of them optional:

        username
            This is the username or email address used to authenticate with
            Twitter.

        password
            This is the password used to authenticate with Twitter.

        useragent
            This is the useragent string passed in each request to twitter.
            It defaults to "Net::Twitter::Lite/0.00000_01".

        source
            This is the application source identifier passed to twitter with
            the "update" method. It defaults to "twitterpm".

        apiurl
            This is the base URL for the Twitter API methods. It defaults to
            "http://twitter.com". You may use a different URL to specify
            another service, such as <http://identi.ca> that provides a
            Twitter Compatible API. Also, see "apihost" and "apirealm",
            below.

        apihost
            This is the "netloc" argument passed to LWP::UserAgent
            internally as part of the HTTP Basic Authentication protocol. It
            defaults to "twitter.com:80".

        apirealm
            This is the "realm" argument passed to LWP::UserAgent internally
            as port of the HTTP Basic Authentication protocol. It defaults
            to "Twitter API".

        useragent_class
            This is the name of the useragent class used internally. It
            defaults to "LWP::UserAgent". You may pass "LWP::UserAgent::POE"
            or another LWP::UserAgent compatible class instead.

    credentials($username, $password)
        This method can be used to set or change the "username" and
        "password" used to authenticated with Twitter.

API METHODS
  Status Methods
    public_timeline

        Parameters: *none*
        Required: *none*

        Returns the 20 most recent statuses from non-protected users who
        have set a custom user icon. Does not require authentication. Note
        that the public timeline is cached for 60 seconds so requesting it
        more often than that is a waste of resources.

        Returns: ArrayRef[Status]

    friends_timeline
    alias: following_timeline

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent statuses posted by the authenticating
        user and that user's friends. This is the equivalent of /home on the
        Web.

        Returns: ArrayRef[Status]

    user_timeline

        Parameters: id, user_id, screen_name, since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent statuses posted from the authenticating
        user. It's also possible to request another user's timeline via the
        id parameter. This is the equivalent of the Web /archive page for
        your own user, or the profile page for a third party.

        Returns: ArrayRef[Status]

    mentions
    alias: replies

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent mentions (statuses containing @username)
        for the authenticating user.

        Returns: ArrayRef[Status]

    show_status
    show_status(id)

        Parameters: id
        Required: id

        Returns a single status, specified by the id parameter. The status's
        author will be returned inline.

        Returns: Status

    update
    update(status)

        Parameters: status, in_reply_to_status_id
        Required: status

        Updates the authenticating user's status. Requires the status
        parameter specified. A status update with text identical to the
        authenticating user's current status will be ignored.

        Returns: Status

    destroy_status
    destroy_status(id)

        Parameters: id
        Required: id

        Destroys the status specified by the required ID parameter. The
        authenticating user must be the author of the specified status.

        Returns: Status

  User Methods
    friends
    friends(id)
    alias: following

        Parameters: id, user_id, screen_name, page
        Required: *none*

        Returns the authenticating user's friends, each with current status
        inline. They are ordered by the order in which they were added as
        friends. It's also possible to request another user's recent friends
        list via the id parameter.

        Returns: ArrayRef[BasicUser]

    followers
    followers(id)

        Parameters: id, user_id, screen_name, page
        Required: *none*

        Returns the authenticating user's followers, each with current
        status inline. They are ordered by the order in which they joined
        Twitter (this is going to be changed).

        Returns: ArrayRef[BasicUser]

    show_user
    show_user(id)

        Parameters: id
        Required: id

        Returns extended information of a given user, specified by ID or
        screen name as per the required id parameter. This information
        includes design settings, so third party developers can theme their
        widgets according to a given user's preferences. You must be
        properly authenticated to request the page of a protected user.

        Returns: ExtendedUser

  Direct Message Methods
    direct_messages
    direct_messages(id)

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns a list of the 20 most recent direct messages sent to the
        authenticating user including detailed information about the sending
        and recipient users.

        Returns: ArrayRef[DirectMessage]

    sent_direct_messages
    sent_direct_messages(id)

        Parameters: since_id, max_id, page
        Required: *none*

        Returns a list of the 20 most recent direct messages sent by the
        authenticating user including detailed information about the sending
        and recipient users.

        Returns: ArrayRef[DirectMessage]

    new_direct_message
    new_direct_message(user, text)

        Parameters: user, text
        Required: user, text

        Sends a new direct message to the specified user from the
        authenticating user. Requires both the user and text parameters.
        Returns the sent message in the requested format when successful.

        Returns: DirectMessage

    destroy_direct_message
    destroy_direct_message(id)

        Parameters: id
        Required: id

        Destroys the direct message specified in the required ID parameter.
        The authenticating user must be the recipient of the specified
        direct message.

        Returns: DirectMessage

  Friendship Methods
    create_friend
    create_friend(id)

        Parameters: id, user_id, screen_name, follow
        Required: id

        Befriends the user specified in the ID parameter as the
        authenticating user. Returns the befriended user in the requested
        format when successful. Returns a string describing the failure
        condition when unsuccessful.

        Returns: BasicUser

    destroy_friend
    destroy_friend(id)
    alias: unfollow

        Parameters: id, user_id, screen_name
        Required: id

        Discontinues friendship with the user specified in the ID parameter
        as the authenticating user. Returns the un-friended user when
        successful. Returns a string describing the failure condition when
        unsuccessful.

        Returns: BasicUser

    friendship_exists
    friendship_exists(user_a, user_b)
    alias: relationship_exists
    alias: follows

        Parameters: user_a, user_b
        Required: user_a, user_b

        Tests if a friendship exists between two users.

        Returns: Bool

  Social Graph Methods
    friends_ids
    friends_ids(id)
    alias: following_ids

        Parameters: id, user_id, screen_name, page
        Required: id

        Returns an array of numeric IDs for every user the specified user is
        following.

        Returns: ArrayRef[Int]

    followers_ids
    followers_ids(id)

        Parameters: id, user_id, screen_name, page
        Required: id

        Returns an array of numeric IDs for every user is followed by.

        Returns: ArrayRef[Int]

  Account Methods
    verify_credentials
    verify_credentials(id)

        Parameters: *none*
        Required: *none*

        Returns an HTTP 200 OK response code and a representation of the
        requesting user if authentication was successful; returns a 401
        status code and an error message if not. Use this method to test if
        supplied user credentials are valid.

        Returns: ExtendedUser

    end_session
    end_session(id)

        Parameters: *none*
        Required: *none*

        Ends the session of the authenticating user, returning a null
        cookie. Use this method to sign users out of client-facing
        applications like widgets.

        Returns: Error

    update_delivery_device
    update_delivery_device(device)

        Parameters: device
        Required: device

        Sets which device Twitter delivers updates to for the authenticating
        user. Sending none as the device parameter will disable IM or SMS
        updates.

        Returns: BasicUser

    update_profile_colors
    update_profile_colors(device)

        Parameters: profile_background_color, profile_text_color,
        profile_link_color, profile_sidebar_fill_color,
        profile_sidebar_border_color
        Required: *none*

        Sets one or more hex values that control the color scheme of the
        authenticating user's profile page on twitter.com. These values are
        also returned in the /users/show API method.

        Returns: ExtendedUser

    update_profile_image
    update_profile_image(image)

        Parameters: image
        Required: image

        Updates the authenticating user's profile image. Expects raw
        multipart data, not a URL to an image.

        Returns: ExtendedUser

    update_profile_background_image
    update_profile_background_image(image)

        Parameters: image
        Required: image

        Updates the authenticating user's profile background image. Expects
        raw multipart data, not a URL to an image.

        Returns: ExtendedUser

    rate_limit_status
    rate_limit_status(image)

        Parameters: *none*
        Required: *none*

        Returns the remaining number of API requests available to the
        requesting user before the API limit is reached for the current
        hour. Calls to rate_limit_status do not count against the rate
        limit. If authentication credentials are provided, the rate limit
        status for the authenticating user is returned. Otherwise, the rate
        limit status for the requester's IP address is returned.

        Returns: RateLimitStatus

    update_profile
    update_profile(image)

        Parameters: name, email, url, location, description
        Required: *none*

        Sets values that users are able to set under the "Account" tab of
        their settings page. Only the parameters specified will be updated;
        to only update the "name" attribute, for example, only include that
        parameter in your request.

        Returns: ExtendedUser

  Favorite Methods
    favorites
    favorites(image)

        Parameters: id, page
        Required: *none*

        Returns the 20 most recent favorite statuses for the authenticating
        user or user specified by the ID parameter.

        Returns: ArrayRef[Status]

    create_favorite
    create_favorite(id)

        Parameters: id
        Required: id

        Favorites the status specified in the ID parameter as the
        authenticating user. Returns the favorite status when successful.

        Returns: Status

    destroy_favorite
    destroy_favorite(id)

        Parameters: id
        Required: id

        Un-favorites the status specified in the ID parameter as the
        authenticating user. Returns the un-favorited status.

        Returns: Status

  Notification Methods
    enable_notifications
    enable_notifications(id)

        Parameters: id
        Required: id

        Enables notifications for updates from the specified user to the
        authenticating user. Returns the specified user when successful.

        Returns: BasicUser

    disable_notifications
    disable_notifications(id)

        Parameters: id
        Required: id

        Disables notifications for updates from the specified user to the
        authenticating user. Returns the specified user when successful.

        Returns: BasicUser

  Block Methods
    create_block
    create_block(id)

        Parameters: id
        Required: id

        Blocks the user specified in the ID parameter as the authenticating
        user. Returns the blocked user when successful. You can find out
        more about blocking in the Twitter Support Knowledge Base.

        Returns: BasicUser

    destroy_block
    destroy_block(id)

        Parameters: id
        Required: id

        Un-blocks the user specified in the ID parameter as the
        authenticating user. Returns the un-blocked user when successful.

        Returns: BasicUser

    block_exists
    block_exists(id)

        Parameters: id, user_id, screen_name
        Required: id

        Returns if the authenticating user is blocking a target user. Will
        return the blocked user's object if a block exists, and error with
        HTTP 404 response code otherwise.

        Returns: BasicUser

    blocking
    blocking(page)

        Parameters: page
        Required: *none*

        Returns an array of user objects that the authenticating user is
        blocking.

        Returns: ArrayRef[BasicUser]

    blocking_ids
    blocking_ids(page)

        Parameters: *none*
        Required: *none*

        Returns an array of numeric user ids the authenticating user is
        blocking.

        Returns: ArrayRef[Int]

  Help Methods
    test
    test(page)

        Parameters: *none*
        Required: *none*

        Returns the string "ok" status code.

        Returns: Str

SEE ALSO
    <http://apiwiki.twitter.com/REST+API+Documentation>
        This is the official Twitter API documentation. It describes the
        methods and their parameters in more detail and may be more current
        than the documentation provided with this module.

    Net::Twitter
        This is the original perl interface to the Twitter API and
        inspiration for this module.

    LWP::UserAgent::POE
        This LWP::UserAgent compatible class can be used in POE based
        application along with Net::Twitter::Lite to provide concurrent,
        non-blocking requests.

AUTHOR
    Marc Mims <marc@questright.com>

LICENSE
    Copyright (c) 2009 Marc Mims

    The Twitter API itself, and the description text used in this module is:

    Copyright (c) 2009 Twitter

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

